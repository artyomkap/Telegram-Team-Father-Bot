import json
import random
import string
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile, CallbackQuery
from keyboards import kb
from databases import requests
from main_handlers.promocode_handlers import CreatePromocode
from states import deposit_state, withdraw_state, admin_items_state, worker_state
import config
from sqlalchemy.ext.asyncio import AsyncSession
from databases.models import User, Promocode, UserPromocodeAssotiation
from sqlalchemy import update, select, delete
from databases.crud import (get_created_promocodes, get_promocode_by_code)
from utils.get_exchange_rate import currency_exchange
from databases.enums import CurrencyEnum

bot: Bot = Bot(config.TOKEN)
router = Router()
languages = ["en", "ru", "pl", "uk"]
translations = {}

for lang in languages:
    with open(f"locales/{lang}.json", "r", encoding="utf-8") as file:
        translations[lang] = json.load(file)


@router.message(F.text == '–í–æ—Ä–∫–µ—Ä')
async def open_work_panel(message: Message, user: User, session: AsyncSession):
    if user.is_worker:
        await bot.send_message(chat_id=message.from_user.id, text='–í–æ—Ä–∫-–ø–∞–Ω–µ–ª—å: ',
                               parse_mode="HTML", reply_markup=kb.work_panel)
    if not user.is_worker:
        user.is_worker = True
        session.add(user)
        await bot.send_message(chat_id=message.from_user.id, text='–í–æ—Ä–∫-–ø–∞–Ω–µ–ª—å: ',
                               parse_mode="HTML", reply_markup=kb.work_panel)


@router.callback_query(lambda c: c.data == 'work_panel')
async def work_panel(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text='–í–æ—Ä–∫-–ø–∞–Ω–µ–ª—å: ',
                                parse_mode="HTML", reply_markup=kb.work_panel)


@router.callback_query(F.data == 'referral_message')
async def get_message_to_referals(call: CallbackQuery, state: worker_state.WorkerPanel.referal_ms_text, user: User,
                                  session: AsyncSession):
    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                text='–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', parse_mode="HTML")
    await state.set_state(worker_state.WorkerPanel.referal_ms_text)


@router.message(StateFilter(worker_state.WorkerPanel.referal_ms_text))
async def send_message_to_referals(message: types.Message, user: User, state: worker_state.WorkerPanel.referal_ms_text,
                                   session: AsyncSession):
    referal_ms_text = message.text
    digit_count = sum(char.isdigit() for char in referal_ms_text)

    # Check if there are more than 4 digits in the message
    if digit_count > 4:
        await bot.send_message(
            chat_id=message.from_user.id,
            text='–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª–µ–µ 4-—Ö —Ü–∏—Ñ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
            parse_mode="HTML"
        )
        return

    result = await session.execute(select(User).where(User.referer_id == user.id))
    referals = result.scalars().all()
    for referal in referals:
        await bot.send_message(chat_id=referal.tg_id, text=referal_ms_text,
                               parse_mode="HTML")
    await state.clear()


@router.callback_query(lambda c: c.data == 'connect_mamont')
async def connect_mamont(call: types.CallbackQuery, state: worker_state.WorkerPanel.referal_id):
    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                text='–í–≤–µ–¥–∏—Ç–µ <b>ID</b> —Ä–µ—Ñ–µ—Ä–∞–ª–∞:', parse_mode="HTML")
    await state.set_state(worker_state.WorkerPanel.referal_id)


@router.message(StateFilter(worker_state.WorkerPanel.referal_id))
async def connect_referal_id(message: types.Message, user: User, state: worker_state.WorkerPanel.referal_id,
                            session: AsyncSession):
    referal_id = message.text
    await state.clear()

    if not referal_id.isdigit():
        await bot.send_message(chat_id=message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π referal_id!', parse_mode="HTML")
        return

    result = await session.execute(select(User).where(User.tg_id == int(referal_id)))
    user1 = result.scalars().first()

    if not user1:
        await bot.send_message(chat_id=message.from_user.id, text='–¢–∞–∫–æ–≥–æ referal_id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', parse_mode="HTML")
        return

    elif user1.referer_id is not None:
        await bot.send_message(chat_id=message.from_user.id, text='–≠—Ç–æ—Ç referal_id —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω!', parse_mode="HTML")
        pass

    else:
        await state.update_data(referal_id=referal_id)
        await session.execute(
            update(User)
            .where(User.tg_id == referal_id)
            .values(referer_id=user.id)
        )
        await state.clear()
        await bot.send_message(chat_id=message.from_user.id, text='–†–µ—Ñ–µ—Ä–∞–ª –ø—Ä–∏–≤—è–∑–∞–Ω!', parse_mode="HTML")


@router.callback_query(lambda c: c.data == 'control_mamonts')
async def control_mamonts(call: types.CallbackQuery, user: User, session: AsyncSession,
                          state: worker_state.WorkerReferal.referal_id):
    result = await session.execute(select(User).where(User.referer_id == user.id))
    users = result.scalars().all()

    if users:
        text = '–†–µ—Ñ–µ—Ä–∞–ª—ã:\n\n'
        for user in users:
            user_balance = round(float(await user.get_balance()), 2)
            text += f'/r_{user.tg_id} | {user.username} | {user_balance} {user.currency.name.upper()}\n'
        text += f'\n<b>–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {len(users)}'
        text += '\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: '
    else:
        text = '–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.'

    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=text,
                                parse_mode="HTML", reply_markup=kb.back_to_admin)
    await state.set_state(worker_state.WorkerReferal.referal_id)


@router.message(F.text.startswith('/ctr_'))
async def mamont_control_panel2(message: Message, session: AsyncSession, user: User,
                                state: worker_state.WorkerReferal.referal_id):
    referal_id = message.text.strip()[5:]
    if not referal_id.isdigit():
        await bot.send_message(chat_id=message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π referal_id!', parse_mode="HTML")
        return
    result = await session.execute(select(User).where(User.tg_id == int(referal_id)))
    referer = result.scalars().first()
    if not referer:
        await bot.send_message(chat_id=message.from_user.id, text='–¢–∞–∫–æ–≥–æ referal_id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', parse_mode="HTML")
        return

    if referer.id == referer.referer_id:
        if referer.is_buying:
            user_is_buying = '–ü–æ–∫—É–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞'
        else:
            user_is_buying = '–ü–æ–∫—É–ø–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞'

        if referer.is_withdraw:
            user_is_withdraw = '–í—ã–≤–æ–¥ –≤–∫–ª—é—á–µ–Ω'
        else:
            user_is_withdraw = '–í—ã–≤–æ–¥ –≤—ã–∫–ª—é—á–µ–Ω'

        if referer.is_verified:
            user_is_verified = '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'
        else:
            user_is_verified = '–ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'

        if referer.is_blocked:
            user_is_blocked = '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
        else:
            user_is_blocked = '–ê–∫—Ç–∏–≤–µ–Ω'

        user_balance_in_currency = round(float(await referer.get_balance()), 2)
        keyboard = await kb.create_mamont_control_kb(referal_id, session)
        text = (f'üèô <b>–ü—Ä–æ—Ñ–∏–ª—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞</b> {referal_id}\n\n'
                f'<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n'
                f'‚î† –ë–∞–ª–∞–Ω—Å –≤ –≤–∞–ª—é—Ç–µ: <b>{user_balance_in_currency} {referer.currency.name.upper()}</b>\n'
                f'‚î† –ú–∏–Ω. –¥–µ–ø–æ–∑–∏—Ç: <b>{referer.min_deposit}</b>\n'
                f'‚î† –ú–∏–Ω. –≤—ã–≤–æ–¥: <b>{referer.min_withdraw}</b>\n'
                f'‚î† üî∞ <b>{user_is_buying}</b>\n'
                f'‚î† üî∞ <b>{user_is_withdraw}</b>\n'
                f'‚î† üîê <b>{user_is_blocked}</b>\n'
                f'‚îñ üî∫ <b>{user_is_verified}</b>\n\n'
                f'<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥–∏–Ω</b>\n'
                f'‚îñ {user.last_login}')
        await state.update_data(referal_id=referal_id)
        await bot.send_message(chat_id=message.from_user.id, text=text, parse_mode="HTML", reply_markup=keyboard)


@router.message(StateFilter(worker_state.WorkerReferal.referal_id))
async def mamont_control_panel(message: Message, session: AsyncSession, state: worker_state.WorkerReferal.referal_id):
    referal_id = message.text.strip()
    await state.clear()

    # Extract referal_id if the message is in the format "/r_{referal_id}"
    if referal_id.startswith("/r_"):
        referal_id = referal_id[3:]  # Remove "/r_"

    if not referal_id.isdigit():
        await bot.send_message(chat_id=message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π referal_id!', parse_mode="HTML")
        return

    result = await session.execute(select(User).where(User.tg_id == int(referal_id)))
    user = result.scalars().first()

    if not user:
        await bot.send_message(chat_id=message.from_user.id, text='–¢–∞–∫–æ–≥–æ referal_id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', parse_mode="HTML")
        return

    # Rest of your code to handle user control panel
    if user.is_buying:
        user_is_buying = '–ü–æ–∫—É–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞'
    else:
        user_is_buying = '–ü–æ–∫—É–ø–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞'

    if user.is_withdraw:
        user_is_withdraw = '–í—ã–≤–æ–¥ –≤–∫–ª—é—á–µ–Ω'
    else:
        user_is_withdraw = '–í—ã–≤–æ–¥ –≤—ã–∫–ª—é—á–µ–Ω'

    if user.is_verified:
        user_is_verified = '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'
    else:
        user_is_verified = '–ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'

    if user.is_blocked:
        user_is_blocked = '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
    else:
        user_is_blocked = '–ê–∫—Ç–∏–≤–µ–Ω'

    user_balance_in_currency = round(float(await user.get_balance()), 2)
    keyboard = await kb.create_mamont_control_kb(referal_id, session)
    text = (f'üèô <b>–ü—Ä–æ—Ñ–∏–ª—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞</b> {referal_id}\n\n'
            f'<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n'
            f'‚î† –ë–∞–ª–∞–Ω—Å –≤ –≤–∞–ª—é—Ç–µ: <b>{user_balance_in_currency} {user.currency.name.upper()}</b>\n'
            f'‚î† –ú–∏–Ω. –¥–µ–ø–æ–∑–∏—Ç: <b>{user.min_deposit}</b>\n'
            f'‚î† –ú–∏–Ω. –≤—ã–≤–æ–¥: <b>{user.min_withdraw}</b>\n'
            f'‚î† üî∞ <b>{user_is_buying}</b>\n'
            f'‚î† üî∞ <b>{user_is_withdraw}</b>\n'
            f'‚î† üîê <b>{user_is_blocked}</b>\n'
            f'‚îñ üî∫ <b>{user_is_verified}</b>\n\n'
            f'<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥–∏–Ω</b>\n'
            f'‚îñ {user.last_login}')
    await state.update_data(referal_id=referal_id)
    await bot.send_message(chat_id=message.from_user.id, text=text, parse_mode="HTML", reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith('mamont|'))
async def mamont_control_handler(call: types.CallbackQuery, state: worker_state.WorkerReferal.referal_id,
                                 session: AsyncSession):
    global new_mamont_deposit, new_mamont_withdraw
    callback = call.data.split('|')[1]
    state_info = await state.get_data()
    referal_id = state_info['referal_id']
    result = await session.execute(select(User).where(User.tg_id == int(referal_id)))
    user = result.scalars().first()
    if callback == 'change_balance':
        await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
                                    text=f'<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user.tg_id}</code></b>\n'
                                         f'{user.fname}\n'
                                         f'/ctr_{user.tg_id}\n\n'
                                         f'–ê–∫—Ç–∏–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{user.currency.name.upper()}</b>\n'
                                         f'–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: <b>{user.balance} {user.currency.name.upper()}</b>\n\n'
                                         f'<i>–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –≤–∞–ª—é—Ç—É\n'
                                         f'–ü—Ä–∏–º–µ—Ä:\n'
                                         f'800 RUB</i>',
                                    parse_mode='HTML')
        await state.set_state(worker_state.WorkerReferal.balance_amount)
        return
    elif callback == 'send_message':
        await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
                                    text='–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞: ')
        await state.set_state(worker_state.WorkerReferal.mamont_message)
        return
    elif callback == 'min_deposit':
        await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
                                    text='–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞: ')
        await state.set_state(worker_state.WorkerReferal.min_deposit)
        return
    elif callback == 'min_withdraw':
        await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
                                    text='–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞: ')
        await state.set_state(worker_state.WorkerReferal.min_withdraw)
    elif callback == 'unverify':
        await session.execute(update(User).where(User.tg_id == int(referal_id)).values(is_verified=False))
        await session.commit()
    elif callback == 'verify':
        await session.execute(update(User).where(User.tg_id == int(referal_id)).values(is_verified=True))
        await session.commit()
    elif callback == 'withdraw':
        if user.is_withdraw:
            await session.execute(update(User).where(User.tg_id == int(referal_id)).values(is_withdraw=False))
            await session.commit()
        else:
            await session.execute(update(User).where(User.tg_id == int(referal_id)).values(is_withdraw=True))
            await session.commit()
    elif callback == 'buying':
        if user.is_buying:
            await session.execute(update(User).where(User.tg_id == int(referal_id)).values(is_buying=False))
            await session.commit()
        else:
            await session.execute(update(User).where(User.tg_id == int(referal_id)).values(is_buying=True))
            await session.commit()
    elif callback == 'block':
        await session.execute(update(User).where(User.tg_id == int(referal_id)).values(is_blocked=True))
        await session.commit()
    elif callback == 'unblock':
        await session.execute(update(User).where(User.tg_id == int(referal_id)).values(is_blocked=False))
        await session.commit()
    elif callback == 'delete':
        await session.execute(delete(User).where(User.tg_id == int(referal_id)))
        await session.commit()
    elif callback == 'update':
        result2 = await session.execute(select(User).where(User.tg_id == int(referal_id)))
        user = result2.scalars().first()

        if user.is_buying:
            user_is_buying = '–ü–æ–∫—É–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞'
        else:
            user_is_buying = '–ü–æ–∫—É–ø–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞'

        if user.is_withdraw:
            user_is_withdraw = '–í—ã–≤–æ–¥ –≤–∫–ª—é—á–µ–Ω'
        else:
            user_is_withdraw = '–í—ã–≤–æ–¥ –≤—ã–∫–ª—é—á–µ–Ω'

        if user.is_verified:
            user_is_verified = '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'
        else:
            user_is_verified = '–ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'

        if user.is_blocked:
            user_is_blocked = '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
        else:
            user_is_blocked = '–ê–∫—Ç–∏–≤–µ–Ω'

        user_balance_in_currency = round(float(await user.get_balance()), 2)
        keyboard = await kb.create_mamont_control_kb(referal_id, session)
        text = (f'üèô <b>–ü—Ä–æ—Ñ–∏–ª—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞</b> {referal_id}\n\n'
                f'<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n'
                f'‚î† –ë–∞–ª–∞–Ω—Å –≤ –≤–∞–ª—é—Ç–µ: <b>{user_balance_in_currency} {user.currency.name.upper()}</b>\n'
                f'‚î† –ú–∏–Ω. –¥–µ–ø–æ–∑–∏—Ç: <b>{user.min_deposit}</b>\n'
                f'‚î† –ú–∏–Ω. –≤—ã–≤–æ–¥: <b>{user.min_withdraw}</b>\n'
                f'‚î† üî∞ <b>{user_is_buying}</b>\n'
                f'‚î† üî∞ <b>{user_is_withdraw}</b>\n'
                f'‚î† üîê <b>{user_is_blocked}</b>\n'
                f'‚îñ üî∫ <b>{user_is_verified}</b>\n\n'
                f'<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥–∏–Ω</b>\n'
                f'‚îñ {user.last_login}')
        await call.answer('–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=text,
                                    parse_mode="HTML", reply_markup=keyboard)
        return

    result2 = await session.execute(select(User).where(User.tg_id == int(referal_id)))
    user2 = result2.scalars().first()

    if user2.is_buying:
        user_is_buying = '–ü–æ–∫—É–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞'
    else:
        user_is_buying = '–ü–æ–∫—É–ø–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞'

    if user2.is_withdraw:
        user_is_withdraw = '–í—ã–≤–æ–¥ –≤–∫–ª—é—á–µ–Ω'
    else:
        user_is_withdraw = '–í—ã–≤–æ–¥ –≤—ã–∫–ª—é—á–µ–Ω'

    if user2.is_verified:
        user_is_verified = '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'
    else:
        user_is_verified = '–ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'

    if user2.is_blocked:
        user_is_blocked = '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
    else:
        user_is_blocked = '–ê–∫—Ç–∏–≤–µ–Ω'

    user_balance_in_currency = round(float(await user2.get_balance()), 2)
    keyboard = await kb.create_mamont_control_kb(referal_id, session)
    text = (f'üèô <b>–ü—Ä–æ—Ñ–∏–ª—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞</b> {referal_id}\n\n'
            f'<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n'
            f'‚î† –ë–∞–ª–∞–Ω—Å –≤ –≤–∞–ª—é—Ç–µ: <b>{user_balance_in_currency} {user2.currency.name.upper()}</b>\n'
            f'‚î† –ú–∏–Ω. –¥–µ–ø–æ–∑–∏—Ç: <b>{user2.min_deposit} RUB</b>\n'
            f'‚î† –ú–∏–Ω. –≤—ã–≤–æ–¥: <b>{user2.min_withdraw} RUB</b>\n'
            f'‚î† üî∞ <b>{user_is_buying}</b>\n'
            f'‚î† üî∞ <b>{user_is_withdraw}</b>\n'
            f'‚î† üîê <b>{user_is_blocked}</b>\n'
            f'‚îñ üî∫ <b>{user_is_verified}</b>\n\n'
            f'<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥–∏–Ω</b>\n'
            f'‚îñ {user2.last_login}')
    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=text,
                                parse_mode="HTML", reply_markup=keyboard)


@router.message(StateFilter(worker_state.WorkerReferal.mamont_message))
async def send_message_to_mamont(message: Message, state: worker_state.WorkerReferal.mamont_message):
    await message.delete()
    message_text = message.text

    # Count the number of digits in the message
    digit_count = sum(char.isdigit() for char in message_text)

    # Check if there are more than 4 digits in the message
    if digit_count > 4:
        await bot.send_message(
            chat_id=message.from_user.id,
            text='–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª–µ–µ 4-—Ö —Ü–∏—Ñ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
            parse_mode="HTML"
        )
        return

    # Retrieve referal_id from the state
    state_info = await state.get_data()
    referal_id = state_info['referal_id']

    # Send the message to the mamont
    await bot.send_message(chat_id=int(referal_id), text=message_text)
    await bot.send_message(chat_id=message.from_user.id, text='–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
    # Clear the state
    await state.clear()


@router.message(StateFilter(worker_state.WorkerReferal.min_deposit))
async def change_min_deposit(message: Message, session: AsyncSession, state: worker_state.WorkerReferal.min_deposit):
    await message.delete()
    min_deposit = message.text
    if not min_deposit.isdigit():
        await bot.send_message(chat_id=message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!', parse_mode="HTML")
        return
    state_info = await state.get_data()
    referal_id = state_info['referal_id']
    await session.execute(update(User).where(User.tg_id == int(referal_id)).values(min_deposit=int(min_deposit)))
    await session.commit()
    await bot.send_message(chat_id=message.from_user.id, text=f'–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {min_deposit}!')
    await state.clear()


@router.message(StateFilter(worker_state.WorkerReferal.min_withdraw))
async def change_min_withdraw(message: Message, session: AsyncSession, state: worker_state.WorkerReferal.min_withdraw):
    await message.delete()
    min_withdraw = message.text
    if not min_withdraw.isdigit():
        await bot.send_message(chat_id=message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!', parse_mode="HTML")
        return
    state_info = await state.get_data()
    referal_id = state_info['referal_id']
    await session.execute(update(User).where(User.tg_id == int(referal_id)).values(min_withdraw=int(min_withdraw)))
    await session.commit()
    await bot.send_message(chat_id=message.from_user.id, text=f'–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {min_withdraw}!')
    await state.clear()


@router.message(StateFilter(worker_state.WorkerReferal.balance_amount))
async def change_mamont_balance(message: Message, session: AsyncSession, state: FSMContext):
    # Extract and parse the balance amount and currency from the message
    parts = message.text.strip().split()

    if len(parts) != 2:
        await bot.send_message(
            chat_id=message.from_user.id,
            text='–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "800 RUB" –∏–ª–∏ "-800 RUB"!',
            parse_mode="HTML"
        )
        return

    # Try to convert the first part into a float to handle both positive and negative amounts
    try:
        balance_amount = float(parts[0])
    except ValueError:
        await bot.send_message(
            chat_id=message.from_user.id,
            text='–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—É–º–º—ã!',
            parse_mode="HTML"
        )
        return

    currency_input = parts[1].upper()

    # Check if the provided currency is valid
    if currency_input not in CurrencyEnum._value2member_map_:
        await bot.send_message(
            chat_id=message.from_user.id,
            text='–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –≤–∞–ª—é—Ç—É! –ù–∞–ø—Ä–∏–º–µ—Ä, "USD" –∏–ª–∏ "RUB".',
            parse_mode="HTML"
        )
        return

    # Retrieve the referal_id from the state
    state_info = await state.get_data()
    referal_id = state_info['referal_id']

    # Retrieve the user associated with the referal_id
    result = await session.execute(select(User).where(User.tg_id == int(referal_id)))
    user = result.scalars().first()

    if not user:
        await bot.send_message(
            chat_id=message.from_user.id,
            text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!',
            parse_mode="HTML"
        )
        return

    # Convert the provided currency amount to USD
    new_balance_change = await currency_exchange.get_rate(CurrencyEnum[currency_input.lower()], CurrencyEnum.usd, balance_amount)

    # Update the user's balance
    updated_balance = user.balance + new_balance_change  # Adjust the balance by the new amount

    await session.execute(
        update(User).where(User.tg_id == int(referal_id)).values(balance=round(float(updated_balance), 2))
    )
    await session.commit()

    # Notify the worker of the successful update
    await bot.send_message(
        chat_id=message.from_user.id,
        text=f'–ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {balance_amount} {currency_input} ({new_balance_change} USD). –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {updated_balance} USD!',
        parse_mode="HTML"
    )
    await state.clear()
    await message.edit_text('–ü—Ä–∏–≤–µ—Ç, –≤–æ—Ä–∫–µ—Ä!', reply_markup=kb.work_panel)



@router.callback_query(F.data == 'worker_back')
async def cmd_worker_back(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text('–ü—Ä–∏–≤–µ—Ç, –≤–æ—Ä–∫–µ—Ä!',
                                     reply_markup=kb.work_panel)


@router.callback_query(F.data.startswith('worker_user|'))
async def open_worker(callback: CallbackQuery, user: User, session: AsyncSession,
                      state: worker_state.WorkerReferal.referal_id):
    referal_id = callback.data.split('|')[1]
    if not referal_id.isdigit():
        await bot.send_message(chat_id=callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π referal_id!', parse_mode="HTML")
        return

    result = await session.execute(select(User).where(User.tg_id == int(referal_id)))
    user = result.scalars().first()

    if not user:
        await bot.send_message(chat_id=callback.from_user.id, text='–¢–∞–∫–æ–≥–æ referal_id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', parse_mode="HTML")
        return

    if user.is_buying:
        user_is_buying = '–ü–æ–∫—É–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞'
    else:
        user_is_buying = '–ü–æ–∫—É–ø–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞'

    if user.is_withdraw:
        user_is_withdraw = '–í—ã–≤–æ–¥ –≤–∫–ª—é—á–µ–Ω'
    else:
        user_is_withdraw = '–í—ã–≤–æ–¥ –≤—ã–∫–ª—é—á–µ–Ω'

    if user.is_verified:
        user_is_verified = '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'
    else:
        user_is_verified = '–ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'

    if user.is_blocked:
        user_is_blocked = '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
    else:
        user_is_blocked = '–ê–∫—Ç–∏–≤–µ–Ω'

    user_balance_in_currency = round(float(await user.get_balance()), 2)
    keyboard = await kb.create_mamont_control_kb(referal_id, session)
    text = (f'üèô <b>–ü—Ä–æ—Ñ–∏–ª—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞</b> {referal_id}\n\n'
            f'<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n'
            f'‚î† –ë–∞–ª–∞–Ω—Å –≤ –≤–∞–ª—é—Ç–µ: <b>{user_balance_in_currency} {user.currency.name.upper()}</b>\n'
            f'‚î† –ú–∏–Ω. –¥–µ–ø–æ–∑–∏—Ç: <b>{user.min_deposit}</b>\n'
            f'‚î† –ú–∏–Ω. –≤—ã–≤–æ–¥: <b>{user.min_withdraw}</b>\n'
            f'‚î† üî∞ <b>{user_is_buying}</b>\n'
            f'‚î† üî∞ <b>{user_is_withdraw}</b>\n'
            f'‚î† üîê <b>{user_is_blocked}</b>\n'
            f'‚îñ üî∫ <b>{user_is_verified}</b>\n\n'
            f'<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥–∏–Ω</b>\n'
            f'‚îñ {user.last_login}')
    await state.update_data(referal_id=referal_id)
    await bot.send_message(chat_id=callback.from_user.id, text=text, parse_mode="HTML", reply_markup=keyboard)


##
# <Promocodes>
###

@router.callback_query(F.data == 'worker_promocode')
async def get_promocode_menu(cb: CallbackQuery):
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏:",
                               reply_markup=kb.get_promocode_menu_kb())


@router.callback_query(F.data == 'create_promocode')
async def cmd_create_promocode(cb: CallbackQuery, state: FSMContext):
    await state.set_state(CreatePromocode.wait_code)
    await cb.message.edit_text("‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥::",
                               reply_markup=kb.get_worker_menu_back_kb())


@router.message(F.text, CreatePromocode.wait_code)
async def set_promocode_code(message: Message, state: FSMContext, session: AsyncSession):
    allowed_char_range = string.ascii_uppercase + string.digits
    if (not all(char in allowed_char_range for char in message.text)
        or len(message.text)) <= 4:
        await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±–æ–ª—å—à–∏–µ –∞–Ω–≥–ª. –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã, –¥–ª–∏–Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –±–æ–ª—å—à–µ 4 —Å–∏–º–≤–æ–ª–æ–≤:',
                             reply_markup=kb.get_worker_menu_back_kb())
        return
    if await get_promocode_by_code(session, message.text) is not None:
        await message.answer('–ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥:',
                             reply_markup=kb.get_worker_menu_back_kb())
        return
    await state.update_data(code=message.text)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω—è—Ç—å—Å—è –±–∞–ª–∞–Ω—Å –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞:',
                         reply_markup=kb.get_promocode_currency_kb())
    await state.set_state(CreatePromocode.wait_currency)


@router.callback_query(F.data.startswith('promo_'))
async def set_promocode_currency(cb: CallbackQuery, state: FSMContext):
    currency = cb.data.split('_')[1]
    await state.update_data(currency=currency)
    await cb.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ {currency.upper()}:",
                               reply_markup=kb.get_worker_menu_back_kb())
    await state.set_state(CreatePromocode.wait_amount)


@router.message(F.text, CreatePromocode.wait_amount)
async def set_promocode_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
    except ValueError:
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –≤–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:",
                             reply_markup=kb.get_worker_menu_back_kb())
        return
    await state.update_data(amount=amount)
    await state.set_state(CreatePromocode.wait_type)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞ - –≤–≤–µ–¥–∏—Ç–µ '0' –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –∏–ª–∏ '1' –¥–ª—è –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–æ–≥–æ:",
                         reply_markup=kb.get_worker_menu_back_kb())


@router.message(F.text, CreatePromocode.wait_type)
async def set_promocode_type(message: Message, state: FSMContext, user: User,
                             session: AsyncSession):
    if message.text not in ('1', '0'):
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞ - –≤–≤–µ–¥–∏—Ç–µ '0' –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –∏–ª–∏ '1' –¥–ª—è –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–æ–≥–æ:",
            reply_markup=kb.get_worker_menu_back_kb())
        return
    data = await state.get_data()
    await state.clear()
    currency = data['currency']
    promocode = Promocode(code=data['code'],
                          amount=data['amount'],
                          currency=CurrencyEnum[currency],
                          reusable=True if message.text == '1' else False)
    (await promocode.awaitable_attrs.users).append(
        UserPromocodeAssotiation(user=user, is_creator=True))
    session.add(promocode)
    await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω", reply_markup=kb.get_worker_menu_back_kb())


@router.callback_query(F.data == 'get_promocode_list')
async def cmd_get_promocode_list(cb: CallbackQuery, user: User, session: AsyncSession):
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥",
                               reply_markup=kb.get_promocode_list_kb(
                                   await get_created_promocodes(session, user),
                               ))


@router.callback_query(F.data.startswith('manage_promocode_'))
async def cmd_manage_promocode(cb: CallbackQuery, user: User, session: AsyncSession):
    promocode = await session.get(Promocode, cb.data.split('_')[-1])
    await cb.message.edit_text(f'''–ü—Ä–æ–º–æ–∫–æ–¥ <code>{promocode.code}</code>
–°—É–º–º–∞: <b>{promocode.amount} {promocode.currency.name.upper()}</b>
–¢–∏–ø: {'–ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π' if promocode.reusable else '–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π'}''',
                               reply_markup=kb.get_promocode_managment_kb(promocode), parse_mode='HTML')


@router.callback_query(F.data.startswith('delete_promocode_'))
async def cmd_delete_promocode(cb: CallbackQuery, session: AsyncSession):
    promocode = await session.get(Promocode, cb.data.split('_')[-1])
    await session.delete(promocode)
    await cb.message.edit_text(f"–ü—Ä–æ–º–æ–∫–æ–¥ <code>{promocode.code}</code> —É–¥–∞–ª—ë–Ω!",
                               reply_markup=kb.get_worker_menu_back_kb())

###
# </Promocodes>
###
