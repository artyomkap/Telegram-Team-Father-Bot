from aiogram.filters import StateFilter
from aiogram import F, Router
import config
from aiogram.types import Message
from aiogram import types, exceptions, Bot
from keyboards import kb
from database.models import User
from middlewares import AuthorizeMiddleware
from main_handlers.states import SendApplication
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import update

router = Router()
router.message.middleware(AuthorizeMiddleware())
router.callback_query.middleware(AuthorizeMiddleware())


@router.message(F.text == '/start')
async def cmd_start(message: Message, bot: Bot, user: User):
    if user.is_blocked:  # TODO: create middleware for this
        await message.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!')
        return
    if user.is_verified:
        await message.answer(text=f'<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.fname}!\n –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –Ω–∏–∂–µ:</b>',
                             parse_mode="HTML", reply_markup=kb.main)
        if user.tg_id in config.ADMIN_IDS:
            await message.answer(text=f'<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, {user.fname}!\n –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –Ω–∏–∂–µ:</b>',
                                 parse_mode="HTML", reply_markup=kb.main_admin)
    else:
        await message.answer(text=f'<b>üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.fname}!\n\
–ü–æ–¥–∞–π –∑–∞—è–≤–∫—É —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ üíé"–ù–∞–∑–≤–∞–Ω–∏–µ" Teamüíé</b>',
                             parse_mode="HTML", reply_markup=kb.apply)


@router.callback_query(F.data == 'apply')
async def application_start(cb: types.CallbackQuery,
                            state: FSMContext):
    await cb.message.answer(text='<b>–¢–≤–æ—è –∑–∞—è–≤–∫–∞: –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞\n\n'
                                 '1. ---\n'
                                 '2. ---\n'
                                 '3. ---\n\n'
                                 'üïµÔ∏è –û—Ç–∫—É–¥–∞ –≤—ã –æ –Ω–∞—Å —É–∑–Ω–∞–ª–∏?</b>', parse_mode='HTML')
    await cb.answer()
    await state.set_state(SendApplication.first_question)


@router.message(StateFilter(SendApplication.first_question))
async def application_fist(message: Message,
                           state: FSMContext,
                           bot: Bot):
    answer = message.text
    await state.update_data(first_question=answer)
    await bot.send_message(message.from_user.id, text='<b>–¢–≤–æ—è –∑–∞—è–≤–∫–∞: –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞\n\n'
                                                      f'1. {answer}\n'
                                                      '2. ---\n'
                                                      '3. ---\n\n'
                                                      'üß† –ï—Å—Ç—å –ª–∏ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã? –ï—Å–ª–∏ –¥–∞ —Ç–æ –∫–∞–∫–æ–π?</b>', parse_mode='HTML')
    await state.set_state(SendApplication.second_question)


@router.message(StateFilter(SendApplication.second_question))
async def application_second(message: Message,
                             state: FSMContext,
                             bot: Bot):
    answer = message.text
    state_info = await state.get_data()
    first_answer = state_info.get('first_question')
    await state.update_data(second_question=answer)
    await bot.send_message(message.from_user.id, text='<b>–¢–≤–æ—è –∑–∞—è–≤–∫–∞: –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞\n\n'
                                                      f'1. {first_answer}\n'
                                                      f'2. {answer}\n'
                                                      '3. ---\n\n'
                                                      'üßë‚Äçüíª –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å —Ä–∞–±–æ—Ç–µ?</b>',
                           parse_mode='HTML')
    await state.set_state(SendApplication.third_question)


@router.message(StateFilter(SendApplication.third_question))
async def application_third(message: Message,
                            state: FSMContext,
                            bot: Bot):
    answer = message.text
    await state.update_data(third_question=answer)
    state_info = await state.get_data()
    first_answer = state_info.get('first_question')
    second_answer = state_info.get('second_question')
    await bot.send_message(message.from_user.id, text='<b>–¢–≤–æ—è –∑–∞—è–≤–∫–∞: –ó–∞–ø–æ–ª–Ω–µ–Ω–∞\n\n'
                                                      f'1. {first_answer}\n'
                                                      f'2. {second_answer}\n'
                                                      f'3. {answer}\n\n'
                                                      'üßë–û—Ç–ø—Ä–∞–≤–∏—Ç—å?</b>', parse_mode='HTML',
                           reply_markup=kb.application_send)


@router.callback_query(lambda call: call.data in ['send_application', 'again'])
async def application_send(call: types.CallbackQuery,
                           state: FSMContext,
                           bot: Bot, user: User):
    if call.data == 'send_application':
        state_info = await state.get_data()
        first_answer = state_info.get('first_question')
        second_answer = state_info.get('second_question')
        third_answer = state_info.get('third_question')
        for admin_id in config.ADMIN_IDS:
            try:
                await bot.send_message(admin_id, text='–£–≤–∞–∂–∞–µ–º—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
                                                      '\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É!!!\n\n'
                                                      f'<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>@{user.username}</code>\n'
                                                      f'<b>–ü–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç: {first_answer}</b>\n'
                                                      f'<b>–í—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç: {second_answer}</b>\n'
                                                      f'<b>–¢—Ä–µ—Ç–∏–π –æ—Ç–≤–µ—Ç: {third_answer}</b>', parse_mode='HTML',
                                       reply_markup=kb.get_admin_accept_kb(user.tg_id))
            except exceptions.TelegramForbiddenError:
                pass
        await state.clear()
        await bot.send_message(call.from_user.id, text='‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞')
    elif call.data == 'again':
        await state.clear()
        await bot.send_message(call.from_user.id,
                               text=f'<b>üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {call.from_user.first_name} –ü–æ–¥–∞–π –∑–∞—è–≤–∫—É —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ üíéParimatch Teamüíé</b>',
                               parse_mode="HTML", reply_markup=kb.apply)


@router.callback_query(F.data.startswith('request_'))
async def admin_application(call: types, user: User, bot: Bot, session: AsyncSession):
    _, status, user_tg_id = call.data.split('_')
    if status == 'accept':

        await bot.send_message(user_tg_id, text='‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞\n\n', reply_markup=kb.main)
        try:
            print(user_tg_id)
            await session.execute(
                update(User)
                .where(User.tg_id == int(user_tg_id))
                .values(is_verified=True)
            )
            await session.commit()
        except Exception as e:
            print(e)
    elif status == 'decline':
        await bot.send_message(user_tg_id, text='‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞', reply_markup=kb.main)
